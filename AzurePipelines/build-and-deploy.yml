trigger:
  branches:
    include:
      - main
      - release/*
      
variables:
  - name: deployGroup
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: main
    ${{ elseif contains(variables['Build.SourceBranch'], 'release/') }}:
      value: release
  # demo Trigger
  # templates expect these variables to exist aka project config
  - name: projectName
    value: 'devsecopy'
  - name: azureServicePrincipal
    value: 'spn-resouces'
  - name: terraformResourceGroup
    value: 'rg-mainResources-prod'
  - name: terraformStorageAccountName
    value: 'tfstatedevsecopsdemoprod'
  - name: terraformContainerName
    value: 'tfstate-cruddemo'
  - name: terraformFolder
    value: 'main'
  - name: orgnaizaionalAcr
    value: "acrorganizationahalimdemodevsecopsprod.azurecr.io/cruddemo"
  - name: acrsc
    value: 'acr-secdemo'
  - name: pipelineURI
    value: "$(System.CollectionUri)$(System.TeamProject)/_build?definitionId=$(System.DefinitionId)"

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'
stages:
- stage: Build
  jobs:
  - job: APIBuild
    steps:
    - template: Templates/deploy-docker.yml
      parameters: 
        folder: 'CRUDDemo'

- ${{ if eq(variables['deployGroup'], 'main') }}:
  - template: Templates/deploy-env.yml
    parameters: 
      environment: dev
      accessGroup: "ACorpDevs"

  - template: Templates/deploy-env.yml
    parameters: 
      environment: qa
      accessGroup: "ACorpDevs"

- ${{ if eq(variables['deployGroup'], 'release') }}:
  - template: Templates/deploy-env.yml
    parameters: 
      environment: PP
      accessGroup: "ACorpDevs"

  - template: Templates/deploy-env.yml
    parameters: 
      environment: PROD
      accessGroup: "Productionacsess"
